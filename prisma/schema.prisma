generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                         String                      @id @default(cuid())
  name                       String?
  email                      String?                     @unique
  emailVerified              DateTime?
  image                      String?
  accounts                   Account[]
  paypalOrders               PaypalOrder[]
  sessions                   Session[]
  stripeOrders               StripeOrder[]
  stripeProductSubscriptions StripeProductSubscription[]
  servers                    DiscordServer[]
}

model DiscordServer {
  id                        String                      @id @default(cuid())
  name                      String?
  serverId                  String?                     @unique
  icon                      String?
  botAccess                 Boolean?
  plan                      Int                         @default(2)
  customization             DiscordServerCustomization?
  paypal                    PaypalConnection?
  prodcuts                  Product[]
  stripe                    StripeConnection?
  stripeSubscriptionSession StripeSubscriptionSession?
  users                     User[]
}

model DiscordServerCustomization {
  id              String         @id @default(cuid())
  accountName     String?
  tagline         String?
  terms           String?
  perks           String?
  template        Int?           @default(1)
  mainColor       String?
  secColor        String?
  logo            String?
  cover           String?
  video           String?
  website         String?
  redirect        String?
  storeLink       String?        @unique
  sortProducts    String?
  discordServerId String?        @unique
  discordServer   DiscordServer? @relation(fields: [discordServerId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model StripeConnection {
  id                   Int           @id @default(autoincrement())
  account              String
  details_submitted    Boolean       @default(false)
  charges_enabled      Boolean       @default(false)
  enabled              Boolean       @default(false)
  discord_server_db_id String        @unique
  discord_server       DiscordServer @relation(fields: [discord_server_db_id], references: [id], onDelete: Cascade)
}

model PaypalConnection {
  id                      Int           @id @default(autoincrement())
  tracking_id             String        @unique
  primary_email_confirmed Boolean?
  payments_receivable     Boolean?      @default(false)
  merchant_id             String?
  discord_server_db_id    String        @unique
  enabled                 Boolean?      @default(false)
  discord_server          DiscordServer @relation(fields: [discord_server_db_id], references: [id], onDelete: Cascade)
}

model StripeSubscriptionSession {
  id                   Int           @id @default(autoincrement())
  session_Id           String        @unique
  discord_server_db_id String        @unique
  status               String?
  current_period_start Int?
  current_period_end   Int?
  discord_server       DiscordServer @relation(fields: [discord_server_db_id], references: [id], onDelete: Cascade)
}

model Product {
  id                         Int                         @id @default(autoincrement())
  name                       String
  visibility                 Boolean                     @default(true)
  price                      Int
  discord_role_id            Int
  billingFrequency           BillingFrequency
  grossEarnings              Int                         @default(0)
  netEarnings                Int                         @default(0)
  active                     Boolean                     @default(true)
  cancelling                 Int                         @default(0)
  cancelled                  Int                         @default(0)
  discord_server_db_id       String
  discord_server             DiscordServer               @relation(fields: [discord_server_db_id], references: [id], onDelete: Cascade)
  paypalOrders               PaypalOrder[]
  stripeOrders               StripeOrder[]
  stripeProductSubscriptions StripeProductSubscription[]
}

model PaypalOrder {
  id                String            @id @default(cuid())
  status            PaypalOrderStatus
  paypalOrderId     String?           @unique
  productId         Int
  user_id           String
  grossProductPrice Int
  platformCharge    Int
  type              BillingFrequency
  product           Product           @relation(fields: [productId], references: [id])
  user              User              @relation(fields: [user_id], references: [id])
}

model StripeOrder {
  id                     String   @id @default(cuid())
  payment_intent         String   @unique
  stripeId               String?
  amount                 Int?
  amount_captured        Int?
  application_fee_amount Int?
  balance_transaction    String?
  receipt_url            String?
  captured               Boolean?
  created                Int?
  customer               String?
  paid                   Boolean?
  product_id             Int
  user_id                String
  product                Product  @relation(fields: [product_id], references: [id])
  user                   User     @relation(fields: [user_id], references: [id])
}

model StripeProductSubscription {
  id                      Int     @id @default(autoincrement())
  session_Id              String  @unique
  status                  String?
  current_period_start    Int?
  current_period_end      Int?
  product_id              Int
  user_id                 String
  total_revenue_generated Int     @default(0)
  product                 Product @relation(fields: [product_id], references: [id])
  user                    User    @relation(fields: [user_id], references: [id])
}

enum BillingFrequency {
  onetime
  recurring_monthly
}

enum PaypalOrderStatus {
  initialized
  captured
}
